<?php

namespace SF\DevToolsBundle\Command;

use Symfony\Component\Console\Input\InputArgument,
    Symfony\Component\Console\Input\InputOption,
    Symfony\Component\Console,
		Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser,
		Sensio\Bundle\GeneratorBundle\Command\Helper\DialogHelper,
		Symfony\Component\Config\Resource\FileResource,
		Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader,
		Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator,
		Symfony\Component\Config\FileLocator;		
    
/**
 * Add CRUD styles command
 *
 * @author Pablo Cuadrado <pablocuadrado@gmail.com>
 */
class BeautifyCRUD extends Console\Command\Command {
	
		private $bundleName;
		private $entityName;
	
    /**
     * Configure command, set parameters definition and help.
     */
    protected function configure() {
        $this
        ->setName('crud:beautify')
        ->setDescription('Adds styles to the CRUDs generated by Symfony.')
        ->setDefinition(array(
            new InputArgument('bundle', InputArgument::REQUIRED, 'Bundle name'),
            new InputArgument('entity', InputArgument::REQUIRED, 'Entity name')
        ))
        ->setHelp(sprintf(
				'%sAgrega estilos a los ABM basicos generados por symfony.%s', 
				PHP_EOL, 
				PHP_EOL
		));
    }

    /**
     * Executes the command
     */
    protected function execute(Console\Input\InputInterface $input, Console\Output\OutputInterface $output) {
    	
			$this->getHelperSet()->set($dialog = new DialogHelper());
      $dialog->writeSection($output, 'SF CRUD Beautifier');
			
			$this->bundleName = $input->getArgument('bundle');			
			$this->entityName = $input->getArgument('entity');
			
			$this->beautifyIndex();
			$this->beautifyEdit();
			$this->beautifyNew();
			$this->beautifyShow();

			$output->writeln("<comment>{$this->entityName}</comment> in <comment>{$this->bundleName}</comment> was <info>beautified! @.@ </info>");
			$output->writeln('');
			
    }
		
		private function beautifyShow() {
			$showModel = $this->getTemplateFile('SFDevToolsBundle', 'BeautifyCRUD', 'show');
			
			$showTemplate = $this->getTemplateFile($this->bundleName, $this->entityName, 'show');
			
			preg_match('/(<table(?:.*)\/table>)/s', $showTemplate, $matches);
			$recordData = $matches[1];
			$recordData = str_replace('record_properties', 'default_entity_show', $recordData);
			
			$showOutput = $showModel;
			//FIXME: Hardcoded app name
			$showOutput = str_replace('[[[appName]]]', 'Plan Abre', $showOutput);
			$showOutput = str_replace('[[[bundleName]]]', $this->bundleName, $showOutput);
			$showOutput = str_replace('[[[entityNameCaps]]]', ucfirst($this->entityName), $showOutput);
			$showOutput = str_replace('[[[entityName]]]', strtolower($this->entityName), $showOutput);
			$showOutput = str_replace('[[[recordData]]]', $recordData, $showOutput);

			return $this->saveTemplateFile($this->bundleName, $this->entityName, $showOutput, 'show', '_backup_show');
		}
		
		private function beautifyNew() {
			$newModel = $this->getTemplateFile('SFDevToolsBundle', 'BeautifyCRUD', 'new');
			
			$newOutput = $newModel;
			//FIXME: Hardcoded app name
			$newOutput = str_replace('[[[appName]]]', 'Plan Abre', $newOutput);
			$newOutput = str_replace('[[[bundleName]]]', $this->bundleName, $newOutput);
			$newOutput = str_replace('[[[entityNameCaps]]]', ucfirst($this->entityName), $newOutput);
			$newOutput = str_replace('[[[entityName]]]', strtolower($this->entityName), $newOutput);

			return $this->saveTemplateFile($this->bundleName, $this->entityName, $newOutput, 'new', '_backup_new');
		}
		
		private function beautifyEdit() {
			$editModel = $this->getTemplateFile('SFDevToolsBundle', 'BeautifyCRUD', 'edit');
			
			$editOutput = $editModel;
			//FIXME: Hardcoded app name
			$editOutput = str_replace('[[[appName]]]', 'Plan Abre', $editOutput);
			$editOutput = str_replace('[[[bundleName]]]', $this->bundleName, $editOutput);
			$editOutput = str_replace('[[[entityNameCaps]]]', ucfirst($this->entityName), $editOutput);
			$editOutput = str_replace('[[[entityName]]]', strtolower($this->entityName), $editOutput);

			return $this->saveTemplateFile($this->bundleName, $this->entityName, $editOutput, 'edit', '_backup_edit');
		}

		private function beautifyIndex() {
			$listModel = $this->getTemplateFile('SFDevToolsBundle', 'BeautifyCRUD', 'list');
			$paginationModel = $this->getTemplateFile('SFDevToolsBundle', 'BeautifyCRUD', 'pagination');
			$listActionsModel = $this->getTemplateFile('SFDevToolsBundle', 'BeautifyCRUD', 'listActions');
			
			$listTemplate = $this->getTemplateFile($this->bundleName, $this->entityName, 'index');
			
			preg_match('/(<table(?:.*)\/table>)/s', $listTemplate, $matches);
			$recordList = $matches[1];
			$recordList = str_replace('records_list', 'table table-bordered table-striped', $recordList);
			preg_match('/(<ul(?:.*)\/ul>)/s', $recordList, $matches);
			$oldListActions = $matches[1];
			$newListActions = str_replace('[[[entityName]]]', strtolower($this->entityName), $listActionsModel);
			$recordList = str_replace($oldListActions, $newListActions, $recordList);

			$listOutput = $listModel;
			//FIXME: Hardcoded app name
			$listOutput = str_replace('[[[appName]]]', 'Plan Abre', $listOutput);
			$listOutput = str_replace('[[[bundleName]]]', $this->bundleName, $listOutput);
			$listOutput = str_replace('[[[entityNameCaps]]]', ucfirst($this->entityName), $listOutput);
			$listOutput = str_replace('[[[entityName]]]', strtolower($this->entityName), $listOutput);
			$listOutput = str_replace('[[[recordList]]]', $recordList, $listOutput);
			$listOutput = str_replace('[[[pagination]]]', $paginationModel, $listOutput);

			return $this->saveTemplateFile($this->bundleName, $this->entityName, $listOutput);
		}

		private function saveTemplateFile($bundleName, $entityName, $contents, $oldName = 'index', $backupName = '_index_backup') {
			$templateNameParser = new TemplateNameParser($this->getApplication()->getKernel());
			$templateReference = $templateNameParser->parse($bundleName . ':' . $entityName . ':' . $oldName . '.html.twig');

			//FIXME: Implement templateLocator? (see getTemplateFile)									
			$templateName = $templateReference->getPath();
			
			//FIXME: Hardcoded bundle name
			$oldFile = str_replace('@SF', 'src/SF/', $templateName);
			
			$backupFile = str_replace($oldName, $backupName, $oldFile);
			
			copy($oldFile, $backupFile);
			
			return file_put_contents($oldFile, $contents);
		}


		private function getTemplateFile($bundleName, $entityName, $templateName = 'index') {
			$templateNameParser = new TemplateNameParser($this->getApplication()->getKernel());
			$templateReference = $templateNameParser->parse($bundleName . ':' . $entityName . ':' . $templateName . '.html.twig');

			//FIXME: Implement templateLocator?
			//$rootDir = $this->getApplication()->getKernel()->getRootDir();
			//$fileLocator = new FileLocator(dirname($rootDir));
			//$templateLocator = new TemplateLocator($fileLocator);
			//$fullPath = $templateLocator->locate($templateReference);									
			$templateName = $templateReference->getPath();
			
			//FIXME: Hardcoded bundle name
			$file = str_replace('@SF', 'src/SF/', $templateName);
			
			return file_get_contents($file);
		}

}
